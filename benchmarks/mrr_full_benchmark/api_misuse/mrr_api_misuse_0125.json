{
  "bug_id": "MRR-API_MISUSE-202508-0125",
  "category": "api_misuse",
  "subcategory": "deprecated_api",
  "language": "python",
  "description": "API misuse: deprecated_api violating API contract",
  "complexity": {
    "spatial_distribution": 9,
    "temporal_spread_months": 6,
    "abstraction_layers": 2,
    "obfuscation_level": "high",
    "cross_module_dependencies": 2,
    "artifact_types": 5
  },
  "code_snippets": {
    "buggy_code": "def buggy_function_deprecated_api(data):\n    # Bug: deprecated_api\n    result = []\n    for item in data:\n        # Buggy logic here\n        if item > 0:\n            result.append(item)\n    return result",
    "fixed_code": "def fixed_function_deprecated_api(data):\n    # Fixed: deprecated_api\n    result = []\n    for item in data:\n        # Fixed logic here\n        if item >= 0:\n            result.append(item)\n    return result"
  },
  "scattered_context": [
    {
      "file_path": "services/file_1.py",
      "content": "# Helper code for api_misuse\ndef helper(): pass",
      "relevance": "low",
      "relationship": "implements",
      "specific_issue": "Related to api_misuse issue",
      "line_numbers": [
        59,
        137,
        164,
        86,
        167
      ]
    },
    {
      "file_path": "models/file_2.py",
      "content": "class CriticalComponent:\n    def process(self, data):\n        # Critical logic related to api_misuse\n        if not self.validate(data):\n            raise ValueError(\"Invalid data\")\n        return self.transform(data)\n    \n    def validate(self, data):\n        # Validation logic\n        return data is not None",
      "relevance": "critical",
      "relationship": "tests",
      "specific_issue": "Related to api_misuse issue",
      "line_numbers": [
        100,
        81
      ]
    },
    {
      "file_path": "models/file_3.py",
      "content": "class CriticalComponent:\n    def process(self, data):\n        # Critical logic related to api_misuse\n        if not self.validate(data):\n            raise ValueError(\"Invalid data\")\n        return self.transform(data)\n    \n    def validate(self, data):\n        # Validation logic\n        return data is not None",
      "relevance": "critical",
      "relationship": "calls",
      "specific_issue": "Related to api_misuse issue",
      "line_numbers": [
        155,
        90
      ]
    },
    {
      "file_path": "models/file_4.py",
      "content": "# Helper code for api_misuse\ndef helper(): pass",
      "relevance": "low",
      "relationship": "uses",
      "specific_issue": "Related to api_misuse issue",
      "line_numbers": [
        76,
        115,
        77,
        41,
        171
      ]
    },
    {
      "file_path": "controllers/file_5.py",
      "content": "# Helper code for api_misuse\ndef helper(): pass",
      "relevance": "low",
      "relationship": "extends",
      "specific_issue": "Related to api_misuse issue",
      "line_numbers": [
        118,
        67,
        131
      ]
    },
    {
      "file_path": "services/file_6.py",
      "content": "class CriticalComponent:\n    def process(self, data):\n        # Critical logic related to api_misuse\n        if not self.validate(data):\n            raise ValueError(\"Invalid data\")\n        return self.transform(data)\n    \n    def validate(self, data):\n        # Validation logic\n        return data is not None",
      "relevance": "critical",
      "relationship": "implements",
      "specific_issue": "Related to api_misuse issue",
      "line_numbers": [
        126,
        47,
        81
      ]
    },
    {
      "file_path": "helpers/file_7.py",
      "content": "# Helper code for api_misuse\ndef helper(): pass",
      "relevance": "medium",
      "relationship": "imports",
      "specific_issue": "Related to api_misuse issue",
      "line_numbers": [
        130
      ]
    },
    {
      "file_path": "models/file_8.py",
      "content": "# Helper code for api_misuse\ndef helper(): pass",
      "relevance": "medium",
      "relationship": "implements",
      "specific_issue": "Related to api_misuse issue",
      "line_numbers": [
        49,
        158,
        143,
        179
      ]
    },
    {
      "file_path": "services/file_9.py",
      "content": "class CriticalComponent:\n    def process(self, data):\n        # Critical logic related to api_misuse\n        if not self.validate(data):\n            raise ValueError(\"Invalid data\")\n        return self.transform(data)\n    \n    def validate(self, data):\n        # Validation logic\n        return data is not None",
      "relevance": "critical",
      "relationship": "implements",
      "specific_issue": "Related to api_misuse issue",
      "line_numbers": [
        169,
        14
      ]
    }
  ],
  "temporal_info": {
    "bug_introduced": "2025-02-08",
    "temporal_spread_days": 180,
    "refactoring_events": 0,
    "related_commits": [
      {
        "hash": "5fd67fb9",
        "date": "2025-04-17",
        "message": "Refactored module 0",
        "files": [
          "file_0.py",
          "file_1.py",
          "file_2.py"
        ]
      },
      {
        "hash": "94d3bf18",
        "date": "2025-05-11",
        "message": "Refactored module 1",
        "files": [
          "file_0.py",
          "file_1.py",
          "file_2.py",
          "file_3.py",
          "file_4.py"
        ]
      },
      {
        "hash": "b9169d7a",
        "date": "2025-05-02",
        "message": "Refactored module 2",
        "files": [
          "file_0.py"
        ]
      },
      {
        "hash": "d7263f20",
        "date": "2025-02-24",
        "message": "Refactored module 3",
        "files": [
          "file_0.py",
          "file_1.py"
        ]
      },
      {
        "hash": "8416941f",
        "date": "2025-06-08",
        "message": "Refactored module 4",
        "files": [
          "file_0.py",
          "file_1.py"
        ]
      }
    ]
  },
  "retrieval_paths": {
    "explicit": [
      {
        "from": "services/file_1.py",
        "to": "models/file_2.py",
        "type": "extends"
      },
      {
        "from": "models/file_2.py",
        "to": "models/file_3.py",
        "type": "extends"
      },
      {
        "from": "models/file_3.py",
        "to": "models/file_4.py",
        "type": "calls"
      },
      {
        "from": "models/file_4.py",
        "to": "controllers/file_5.py",
        "type": "calls"
      },
      {
        "from": "controllers/file_5.py",
        "to": "services/file_6.py",
        "type": "imports"
      }
    ],
    "implicit": [
      {
        "files": [
          "helpers/file_7.py",
          "services/file_1.py",
          "models/file_3.py"
        ],
        "pattern": "shared_dependency"
      },
      {
        "files": [
          "controllers/file_5.py",
          "models/file_8.py",
          "services/file_6.py"
        ],
        "pattern": "shared_dependency"
      },
      {
        "files": [
          "services/file_9.py",
          "models/file_2.py",
          "models/file_4.py"
        ],
        "pattern": "shared_dependency"
      }
    ],
    "compositional": [
      {
        "path": [
          "controllers/file_5.py",
          "models/file_3.py"
        ],
        "depth": 1
      },
      {
        "path": [
          "services/file_6.py",
          "models/file_3.py",
          "helpers/file_7.py"
        ],
        "depth": 2
      }
    ]
  },
  "obfuscation": {
    "obfuscation_level": "high",
    "renamed_entities": {
      "entity_0": "gaSgjoyaqY",
      "entity_1": "ncpMcNTUkU",
      "entity_2": "SFLlUaEiRE",
      "entity_3": "BaXuOOzOqX",
      "entity_4": "mkfTMXNdnf",
      "entity_5": "tJajZXEOFc"
    },
    "moved_files": 1,
    "refactored_modules": 2
  },
  "ground_truth": {
    "root_cause": "deprecated_api in main processing logic",
    "fix_type": "api_correction",
    "must_find_files": [
      "models/file_2.py",
      "models/file_3.py",
      "services/file_6.py",
      "services/file_9.py"
    ],
    "should_find_files": [
      "helpers/file_7.py",
      "models/file_8.py"
    ],
    "expected_behavior": {
      "should_not_error": true,
      "expected_output": "Correct processing result",
      "performance_threshold": 1.0876809496827806
    }
  },
  "test_artifacts": [
    {
      "file_name": "test_api_misuse_1.python",
      "test_code": "import unittest\n\nclass TestApi_Misuse(unittest.TestCase):\n    def test_scenario_1(self):\n        # Test for api_misuse\n        result = function_under_test(test_data)\n        self.assertEqual(result, expected_result)\n",
      "test_type": "unit"
    },
    {
      "file_name": "test_api_misuse_2.python",
      "test_code": "import unittest\n\nclass TestApi_Misuse(unittest.TestCase):\n    def test_scenario_2(self):\n        # Test for api_misuse\n        result = function_under_test(test_data)\n        self.assertEqual(result, expected_result)\n",
      "test_type": "unit"
    },
    {
      "file_name": "test_api_misuse_3.python",
      "test_code": "import unittest\n\nclass TestApi_Misuse(unittest.TestCase):\n    def test_scenario_3(self):\n        # Test for api_misuse\n        result = function_under_test(test_data)\n        self.assertEqual(result, expected_result)\n",
      "test_type": "e2e"
    }
  ],
  "error_artifacts": [
    {
      "error_type": "api_misuse",
      "error_message": "TypeError: Invalid argument type for API call",
      "stack_trace": "Traceback (most recent call last):\n  File \"main.py\", line 42, in <module>\n    result = process_data(input_data)\n  File \"processor.py\", line 15, in process_data\n    return transform(validate(data))\n  File \"validator.py\", line 8, in validate\n    raise ValueError(\"Invalid data\")\nValueError: Invalid data",
      "timestamp": "2025-08-07T02:22:50.213096"
    },
    {
      "error_type": "api_misuse",
      "error_message": "TypeError: Invalid argument type for API call",
      "stack_trace": "Traceback (most recent call last):\n  File \"main.py\", line 42, in <module>\n    result = process_data(input_data)\n  File \"processor.py\", line 15, in process_data\n    return transform(validate(data))\n  File \"validator.py\", line 8, in validate\n    raise ValueError(\"Invalid data\")\nValueError: Invalid data",
      "timestamp": "2025-08-07T02:22:50.213097"
    }
  ],
  "symptoms": [
    "Generic symptom"
  ],
  "error_location": {
    "file": "main.py",
    "line": 40,
    "function": "process_function",
    "module": "core"
  },
  "evaluation_criteria": {
    "must_find_files": [
      "models/file_2.py",
      "models/file_3.py",
      "services/file_6.py"
    ],
    "should_find_files": [],
    "retrieval_threshold": 0.75,
    "fix_validation": "must_pass_tests"
  }
}